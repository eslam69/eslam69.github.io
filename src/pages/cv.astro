---
import Layout from '../layouts/Layout.astro';
import { myName } from './index.astro';

const education = [
  {
    degree: 'Master of Science in Computer Science',
    school: 'University Name',
    year: '2020-2022',
    description: 'Focus on Machine Learning and Software Engineering',
  },
  // Add more education entries
];

const experience = [
  {
    title: 'Senior Software Developer',
    company: 'Company Name',
    period: '2022-Present',
    description: [
      'Led development of key features for flagship product',
      'Mentored junior developers and conducted code reviews',
      'Implemented CI/CD pipelines and improved deployment processes',
    ],
  },
  // Add more experience entries
];

const skills = [
  'JavaScript/TypeScript',
  'React',
  'Node.js',
  'Python',
  'AWS',
  'Docker',
  // Add more skills
];

const certifications = [
  {
    name: 'AWS Certified Developer',
    issuer: 'Amazon Web Services',
    year: '2023',
  },
  // Add more certifications
];

const projects = [
  {
    title: 'IoT Web-based Dashboard',
    technologies: ['Flask', 'ROS', 'Dash', 'Plotly', 'CSS'],
    description: 'Designed and developed a user interface connected to a data acquisition mobile robot through ROS communication. The interface facilitated real-time control, sensory data plotting, space-time sensory data mapping using heatmaps, and incorporated features for comprehensive historical data analysis.',
    demoLink: 'https://youtu.be/Cj7dUl67Fww?si=yy_5OJI-ni-1Tfc1',
    year: '2024',
  },
  {
    title: 'Efficient Monocular Depth Estimation',
    technologies: ['Deep Learning', 'PyTorch'],
    description: 'Implemented an advanced Encoder-Decoder model for precise monocular depth estimation using RGB frames. Achieved notable efficiency improvements compared to existing methods.',
    year: '2023',
  },
  {
    title: 'Securing CAN Bus using CNNs and Ensemble Methods',
    technologies: ['Deep Learning', 'PyTorch'],
    description: 'Developed Intrusion detection models for the automotive Controller Area Network Bus utilizing Convolutional Neural Networks and Ensemble Methods.',
    year: '2023',
  },
  {
    title: 'Adaptive DNS Data Exfiltration Detection on a Kafka Stream',
    technologies: ['Kafka', 'Docker', 'Machine Learning'],
    description: 'Conducted thorough analysis and preprocessing of DNS traffic data, addressed data imbalances, and utilized feature engineering for dimensionality reduction. Implemented a binary classification pipeline to predict DNS-based data exfiltration. Integrated pipeline into Kafka streaming within Docker. Implemented dynamic analysis: processed 1,000 observations in sliding window. Dynamically retrained model based on evolving metrics for real-time threat detection.',
    year: '2023',
  },
  {
    title: 'Wireless Sensor Node Deployment Optimization using Particle Swarm Optimization in ns-3 Simulator',
    technologies: ['IoT', 'C++', 'ns-3', 'Optimization'],
    description: 'Designed and created a wireless sensor node deployment optimization system utilizing Particle Swarm Optimization, developed using the ns-3 simulator and C++, to enhance network coverage and performance.',
    year: '2023',
  },
  {
    title: 'Multi-Service Daemon Logger for Raspberry Pi',
    technologies: ['C++', 'POSIX', 'Boost', 'CMake'],
    description: 'Developed a versatile logger daemon for Raspberry Pi to centralize and manage log data from various applications. Implemented POSIX communication, including sockets and pipes, and utilized a custom C++ library for synchronized shared memory operations. Integrated Boost logger module, enabling dynamic configuration via a config file. Automated module builds with CMake.',
    githubLink: 'https://github.com/eslam69/RPI-MultiService-Logger-Daemon',
    year: '2023',
  },
  {
    title: 'Online Model-Free Reinforcement Learning for the Trajectory Tracking Control of Quadcopters',
    technologies: ['Reinforcement Learning', 'Adaptive Control', 'C++'],
    description: 'Implemented an online model-free reinforcement learning approach to enhance quadcopter trajectory tracking, outperforming traditional PID controllers in challenging scenarios with dynamic conditions and sudden payload changes.',
    year: '2023',
  },
  {
    title: '3D Object Detection and Classification from Lidar Point Clouds Data',
    technologies: ['Python', 'Open3D', 'Deep learning', 'PyTorch'],
    description: 'Extracted Lidar point-clouds from the Waymo data set, done visualization, conversion to a birds-eye view representation then done inference with FPN-ResNet.',
    year: '2023',
  },
  {
    title: 'Lidar and Camera Senors Fusion for Multi-Target Tracking',
    technologies: ['Extended Kalman Filter', 'Open3D', 'Deep learning'],
    description: 'Implemented an extended Kalman filter to track several vehicles over time, by fusing camera and lidar detections.',
    year: '2023',
  },
  {
    title: 'Scan Matching Localization in CARLA',
    technologies: ['C++', 'PCL', 'CARLA Simulator', 'Eigen'],
    description: 'Implemented Iterative Closest Point (ICP) Algorithm on 3D point cloud map obtained from Carla simulator to recover the position of a car as it moves.',
    year: '2023',
  },
  {
    title: 'Optimization Toolkit for Neural Models (BSc Graduation Project)',
    technologies: ['Python', 'Neuroscience', 'Multi-objective optimization', 'Parallel Computing', 'QML', 'Qt'],
    description: 'A semi/full automated optimization tool to calibrate complex neural computer models with experimental data, enhancing the study of nervous system and muscle control by accurately mimicking cellular mechanisms and neural signals.',
    githubLink: 'https://github.com/ForthePareto/SpikOpt',
    year: '2021',
  },
  {
    title: 'Indoor Localization Wearable',
    technologies: ['Python', 'C++', 'IoT', 'Machine learning', 'Firebase', 'Esp32'],
    description: 'A wearable device that helps to track the location of patients indoor e.g hospitals based on wifi‑figerprints.',
    githubLink: 'https://github.com/eslam69/Indoor-Localization-wearable',
    year: '2021',
  },
  {
    title: 'SpikeCV',
    technologies: ['Python', 'Computer Vision'],
    description: 'A library that implements a variety of Image processing and computer vision algorithms from scratch, with a user‑friendly GUI.',
    githubLink: 'https://github.com/ForthePareto/SpikeCV',
    year: '2021',
  },
  {
    title: 'Advanced Lane Finding System for Self‑Driving Cars',
    technologies: ['Python', 'Computer Vision'],
    description: 'A road‑lane lines detection pipeline with Computer Vision.',
    githubLink: 'https://github.com/eslam69/Advanced-Lane-Finding',
    year: '2021',
  },
  {
    title: 'Automated Dead Chicken Detection System',
    technologies: ['Computer Vision', 'YOLOv8', 'Jetson Nano', 'TensorRT', 'ROS'],
    description: 'Developed automated system for detecting deceased chickens utilizing YOLOv8. Achieved an impressive Mean Average Precision (MAP) of 0.91. Successfully deployed the model on Jetson Nano, optimizing performance through TensorRT inference. Integrated the solution into a ROS node for seamless communication and interaction within a robotic system.',
    year: '2023',
  },
  {
    title: 'EAOS Car',
    technologies: ['Python', 'C++', 'Computer Vision', 'Esp32'],
    description: 'Mini Self‑Driving car.',
    githubLink: 'https://github.com/eslam69/EAOS-Car',
    year: '2021',
  },
  {
    title: 'Real‑Time Embedded Temperature Controlling System',
    technologies: ['Embedded C', 'Design patterns', 'Atmega32'],
    githubLink: 'https://github.com/ForthePareto/Embedded-Temperature-Controlling-System',
    year: '2021',
  },
  {
    title: 'OpenStreetMap Route Planner',
    technologies: ['C++'],
    description: 'An implementation of A* Search Algorithm for finding the shortest path between two nodes on OpenStreetMap.',
    githubLink: 'https://github.com/eslam69/OpenStreetMap-Route_Planning',
    year: '2020',
  },
  {
    title: 'Linux System Monitor',
    technologies: ['C++', 'ncurses'],
    description: 'A software similar to htop that monitors the running processes in Linux OS.',
    githubLink: 'https://github.com/eslam69/Linux-System-Monitor',
    year: '2020',
  },
  {
    title: 'Hospital Computerized Maintenance Management System (CMMS)',
    technologies: ['Python', 'MySQL', 'Qt'],
    githubLink: 'https://github.com/eslam69/CMMS-for-healthcare-institutions',
    year: '2020',
  },
  {
    title: 'Digital FIR Filter for Noise Reduction In ECG Signal',
    technologies: ['8051 micro‑controller', 'DSP', 'C', 'FDA tools'],
    description: 'Developed a digital FIR filter on an 8051 microcontroller to reduce ECG signal noise. Utilized DSP algorithms in C, implemented a ring buffer for data handling, and applied floating point to fixed‑point conversion for optimization. Improved signal to noise ratio, enhancing ECG accuracy.',
    year: '2020',
  },
  {
    title: 'Music Recognizer Software (Shazam like‑App)',
    technologies: ['Python', 'DSP', 'Librosa', 'Qt'],
    githubLink: 'https://github.com/eslam69/Music-Recognizer',
    year: '2020',
  },
  {
    title: 'Blind Source Separation Software',
    technologies: ['Python', 'ICA', 'Qt'],
    description: 'The software objective is to recover the original component signals from a mixture signal, like abnormal ECG signal(with arrhythmia) or cocktail party voices mixture.',
    year: '2020',
  },
  {
    title: 'Elevator Control System',
    technologies: ['8051 micro‑controller', 'C', 'Proteus'],
    year: '2020',
  },
  {
    title: 'Assistive glasses for Alzheimer’s patient',
    technologies: ['Python', 'OpenCV', 'Arduino', 'camera', 'sensors'],
    description: 'Glasses equipped with mini camera and micro controller aimed to recognize people for the Alzheimer’s patient.',
    year: '2019',
  },
  {
    title: 'Low‑cost infants radiant warmer',
    technologies: ['Atmega16', 'motor', 'sensors'],
    year: '2020',
  },
];
---

<Layout title={"CV - " + myName}>
  <div class="max-w-3xl mx-auto">
    <section class="mb-12">
      <h1 class="text-4xl font-bold mb-4">{myName}</h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 mb-4">
        Senior Software Developer
      </p>
      <div class="flex gap-4 text-gray-600 dark:text-gray-300">
        <p>📍 Location</p>
        <p>📧 email@example.com</p>
      </div>
    </section>

    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-primary-600 dark:text-primary-400">
        Education
      </h2>
      <div class="space-y-6">
        {education.map(edu => (
          <div>
            <h3 class="text-xl font-semibold">{edu.degree}</h3>
            <p class="text-gray-600 dark:text-gray-300">{edu.school}</p>
            <p class="text-gray-500 dark:text-gray-400">{edu.year}</p>
            <p class="mt-2">{edu.description}</p>
          </div>
        ))}
      </div>
    </section>

    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-primary-600 dark:text-primary-400">
        Experience
      </h2>
      <div class="space-y-8">
        {experience.map(exp => (
          <div>
            <h3 class="text-xl font-semibold">{exp.title}</h3>
            <p class="text-gray-600 dark:text-gray-300">{exp.company}</p>
            <p class="text-gray-500 dark:text-gray-400">{exp.period}</p>
            <ul class="mt-2 list-disc list-inside space-y-1">
              {exp.description.map(item => (
                <li>{item}</li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </section>

    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-primary-600 dark:text-primary-400">
        Skills
      </h2>
      <div class="flex flex-wrap gap-2">
        {skills.map(skill => (
          <span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 rounded-full">
            {skill}
          </span>
        ))}
      </div>
    </section>

    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-primary-600 dark:text-primary-400">
        Certifications
      </h2>
      <div class="space-y-4">
        {certifications.map(cert => (
          <div>
            <h3 class="text-xl font-semibold">{cert.name}</h3>
            <p class="text-gray-600 dark:text-gray-300">{cert.issuer}</p>
            <p class="text-gray-500 dark:text-gray-400">{cert.year}</p>
          </div>
        ))}
      </div>
    </section>

    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-primary-600 dark:text-primary-400">
        Projects
      </h2>
      <div class="space-y-8">
        {projects.map(project => (
          <div>
            <h3 class="text-xl font-semibold">{project.title}</h3>
            <p class="text-gray-600 dark:text-gray-300">{project.technologies.join(', ')}</p>
            <p class="mt-2">{project.description}</p>
            {project.demoLink && (
              <a href={project.demoLink} class="text-primary-600 dark:text-primary-400 hover:underline">
                [Demo]
              </a>
            )}
            {project.githubLink && (
              <a href={project.githubLink} class="text-primary-600 dark:text-primary-400 hover:underline">
                [Link]
              </a>
            )}
            <p class="text-gray-500 dark:text-gray-400">{project.year}</p>
          </div>
        ))}
      </div>
    </section>
  </div>
</Layout>