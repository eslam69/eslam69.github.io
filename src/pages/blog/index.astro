---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { myName } from '../index.astro';

const posts = await getCollection('blog');
posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<Layout title={"Blog - " + myName}>
  <div class="max-w-3xl mx-auto">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-4xl font-bold">Blog</h1>
      <a 
        href="/rss.xml"
        class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400"
        title="RSS Feed"
      >
        <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M6.18,15.64A2.18,2.18 0 0,1 8.36,17.82C8.36,19 7.38,20 6.18,20C5,20 4,19 4,17.82A2.18,2.18 0 0,1 6.18,15.64M4,4.44A15.56,15.56 0 0,1 19.56,20H16.73A12.73,12.73 0 0,0 4,7.27V4.44M4,10.1A9.9,9.9 0 0,1 13.9,20H11.07A7.07,7.07 0 0,0 4,12.93V10.1Z"/>
        </svg>
      </a>
    </div>
    <section class="mb-12">
      <h1 class="text-4xl font-bold mb-4">Blog</h1>
      <p class="text-xl text-gray-600 dark:text-gray-300">
        Thoughts, tutorials, and insights about technology and software development.
      </p>
    </section>

    <div class="grid gap-8">
      {posts.map(post => (
        <article class="border border-gray-200 dark:border-gray-700 rounded-lg p-6 transition-transform hover:-translate-y-1">
          <a href={`/blog/${post.slug}`}>
            {post.data.coverImage && (
              <img
                src={post.data.coverImage}
                alt={post.data.title}
                class="w-full h-48 object-cover rounded-lg mb-4"
              />
            )}
            <h2 class="text-2xl font-bold mb-2 hover:text-primary-600 dark:hover:text-primary-400">
              {post.data.title}
            </h2>
          </a>
          <div class="flex gap-4 text-sm text-gray-500 dark:text-gray-400 mb-4">
            <time datetime={post.data.pubDate.toISOString()}>
              {post.data.pubDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </time>
            <span>Â·</span>
            <span>{post.data.readingTime} min read</span>
          </div>
          <p class="text-gray-600 dark:text-gray-300 mb-4">
            {post.data.description}
          </p>
          <div class="flex flex-wrap gap-2">
            {post.data.tags.map(tag => (
              <span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
        </article>
      ))}
    </div>
  </div>
</Layout>